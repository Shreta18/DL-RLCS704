# -*- coding: utf-8 -*-
"""dl.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lKvoLQu2KiYlsE2SnTrGYt43bazejLAZ
"""

# Basic Array Creation
#1. Create a 1D array with the elements [1, 2, 3, 4, 5].
#2. Create a 2D array with the elements [[1, 2, 3], [4, 5, 6]].
#3. Create a 3x3 array filled with zeros.
#4. Create a 2x2 array filled with ones.

# Create a 1D array
import numpy as np
array_1d = np.array([1, 2, 3, 4, 5])
print(array_1d)

# Create a 2D array
array_2d = np.array([[1, 2, 3], [4, 5, 6]])
print(array_2d)

# Create an array with zeros
zeros_array = np.zeros((3, 3))
print(zeros_array)

# Create an array with ones
ones_array = np.ones((2, 2))
print(ones_array)

#2. Array Operations
#1. Create two arrays: a = [1, 2, 3] and b = [4, 5, 6].
#2. Perform element-wise addition, subtraction, multiplication, and division on these arrays.

# Create two arrays
a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

# Addition
sum_array = np.add(a, b)
print("sum:",sum_array)

# Subtraction
diff_array = np.subtract(a, b)
print("sub:",diff_array)

# Multiplication
product_array = np.multiply(a, b)
print("Multi:",product_array)

# Division
quotient_array = np.divide(a, b)
print("div:",quotient_array)

#3. Matrix Multiplication
#1. Create two matrices: matrix_a = [[1, 2], [3, 4]] and matrix_b = [[5, 6], [7, 8]].
#2. Perform matrix multiplication on these matrices.

# Create two matrices
matrix_a = np.array([[1, 2], [3, 4]])
matrix_b = np.array([[5, 6], [7, 8]])

# Matrix multiplication
matrix_product = np.dot(matrix_a, matrix_b)
print("matrix product:",matrix_product)

#4. Broadcasting

#1. Create an array: array = [1, 2, 3].
#2. Multiply this array by a scalar value, e.g., 2, using broadcasting.

# Create an array and a scalar
array = np.array([1, 2, 3])
scalar = 2

# Broadcasting
broadcasted_array = array * scalar
print("broadcasted array", broadcasted_array)

#5. Statistical Operations
#1. Create an array: data = [1, 2, 3, 4, 5].
#2. Calculate the mean, standard deviation, and sum of this array.

# Create an array
data = np.array([1, 2, 3, 4, 5])

# Mean
mean_value = np.mean(data)
print("mean value:",mean_value)

# Standard deviation
std_value = np.std(data)
print("standard value:", std_value)

# Sum
sum_value = np.sum(data)
print("sum value:", sum_value)

#6. Reshaping Arrays
#1. Create a 1D array: array = [1, 2, 3, 4, 5, 6].
#2. Reshape this array to a 2x3 array.
#3. Reshape the same array to a 3x2 array.

# Create a 1D array
array = np.array([1, 2, 3, 4, 5, 6])

# Reshape to 2x3
reshaped_array = array.reshape((2, 3))
print("reshaped array:", reshaped_array)

# Reshape to 3x2
reshaped_array = array.reshape((3, 2))
print("reshaped array", reshaped_array)

#7. Element-wise Operations
#1. Create two arrays: array_a = [1, 2, 3] and array_b = [4, 5, 6].
#2. Perform element-wise addition and multiplication on these arrays.

# Create two arrays
array_a = np.array([1, 2, 3])
array_b = np.array([4, 5, 6])

# Element-wise addition
add_result = array_a + array_b
print("add_result:", add_result)

# Element-wise multiplication

multiply_result = array_a * array_b
print("multiplication:", multiply_result)

#8. Slicing and Indexing
#1. Create a 2D array: array_2d = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].
#2. Access the element at row 1, column 1.
#3. Access row 1.
#4. Access column 1.

# Create a 2D array
array_2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Accessing an element
element = array_2d[1, 1]
print("Element at [1, 1]:",element)

# Accessing a row
row = array_2d[1, :]
print("row1:",row)

# Accessing a column
column = array_2d[:, 1]
print ("Column1:",column)

#9. Creating Random Arrays
#1. Create a 3x3 array with random floats.
#2. Create a 3x3 array with random integers between 0 and 10.

# Create a random array
random_array = np.random.rand(3, 3)
print("Random Array", random_array)

# Create a random integer array
random_int_array = np.random.randint(0, 10, (3, 3))
print("Random Integer Array", random_int_array)

#10. Stacking and Concatenating Arrays
#1. Create two arrays: array_a = [1, 2, 3] and array_b = [4, 5, 6].
#2. Perform vertical stacking on these arrays.
#3. Perform horizontal stacking on these arrays.

# Create two arrays
array_a = np.array([1, 2, 3])
array_b = np.array([4, 5, 6])

# Vertical stack
v_stack = np.vstack((array_a, array_b))
print("vertical stack:", v_stack)

# Horizontal stack
h_stack = np.hstack((array_a, array_b))
print("horizontal stack:", h_stack)

"""**numpy practise assignment**

.Basic Array **Creation**
"""

#1.Basic Array Creation

#Create an array with 10 equally spaced numbers between 0 and 1.
#Create a 1D array of 20 random integers between 1 and 100.
#Create a 2D array with the shape (4, 4) filled with the value 7.
#Create a 1D array of 10 elements with the same value, 3.14.
#Create a 2D array with the shape (3, 3) with values ranging from 1 to 9.

#Create an array with 10 equally spaced numbers between 0 and 1.
import numpy as np
arr=np.linspace(0,1,10)
print("Array with 10 equally spaced numbers between 0 and 1:\n",arr)

#Create a 1D array of 20 random integers between 1 and 100.
random_int_arr=np.random.randint(1,100,20)
print("\n1D array of 20 random integers between 1 and 100:\n",random_int_arr)

#Create a 2D array with the shape (4, 4) filled with the value 7
arr=np.full((4,4),7)
print("\n2D array with the shape (4, 4) filled with the value 7:\n",arr)

#Create a 1D array of 10 elements with the same value, 3.14.
arr=np.full(10,3.14)
print("\n1D array of 10 elements with the same value, 3.14:\n",arr)

#Create a 2D array with the shape (3, 3) with values ranging from 1 to 9.
arr=np.arange(1,10).reshape(3,3)
print("\n2D array with the shape (3, 3) with values ranging from 1 to 9:\n",arr)

"""2.Array Operations

Create two arrays: a = [1, 3, 5, 7, 9] and b = [2, 4, 6, 8, 10]. Perform element-wise subtraction.bold text
Multiply array a by 3: a = [2, 4, 6, 8].
Divide array a by 2: a = [10, 20, 30, 40].
Find the element-wise modulus of two arrays: a = [5, 10, 15], b = [2, 3, 4].
Create two arrays: a = [1, 2, 3], b = [4, 5, 6]. Compute the dot product.bold text
"""

import numpy as np

#Create two arrays: a = [1, 3, 5, 7, 9] and b = [2, 4, 6, 8, 10]. Perform element-wise subtraction.
arr_a=np.array([1,3,5,7,9])
arr_b=np.array([2,4,6,8,10])
subtract_arr=np.subtract(arr_a,arr_b)
print("different:\n",subtract_arr)

diff_arr=arr_a - arr_b
print("\ndifferent array:\n",diff_arr)

#Multiply array a by 3: a = [2, 4, 6, 8].
arr=np.array([2,4,6,8])
multi_arr=np.multiply(arr,3)
print("\nproduct:\n",multi_arr)

multi_arr1=arr*3
print("\nproduct array:\n",multi_arr1)

#Divide array a by 2: a = [10, 20, 30, 40].
arr=np.array([10,20,30,40])
div_arr=np.divide(arr,2)
print("divided array:\n",div_arr)

div_arr1=arr/2
print("divided array2:\n",div_arr1)

#Find the element-wise modulus of two arrays: a = [5, 10, 15], b = [2, 3, 4].
arr_a=np.array([5,10,15])
arr_b=np.array([2,3,4])
mod_arr=np.mod(arr_a,arr_b)
print(" \nthe element-wise modulus of two arrays:\n",mod_arr)

#Create two arrays: a = [1, 2, 3], b = [4, 5, 6]. Compute the dot product
array_a=np.array([1,2,3])
array_b=np.array([4,5,6])
dot_product=np.dot(array_a,array_b)
print("\n Dot product:\n",dot_product)

"""3.Matrix Multiplication

Create two matrices: a = [[2, 3], [4, 5]] and b = [[1, 0], [0, 1]]. Perform matrix multiplication.
Multiply a 3x3 matrix with a 3x1 vector.
Create a 4x4 identity matrix and multiply it by a 4x4 matrix filled with random integers.
Perform matrix multiplication on two 3x3 matrices: a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] and b = [[9, 8, 7], [6, 5, 4], [3, 2, 1]].
Create a 2x3 matrix and a 3x2 matrix. Perform matrix multiplication.
[ ]
### **New section**
"""

import numpy as np
#Create two matrices: a = [[2, 3], [4, 5]] and b = [[1, 0], [0, 1]]. Perform matrix multiplication.
matrix_a=([[2,3],[4,5]])
matrix_b=([[1,0],[0,1]])
matrix_multi=np.dot(matrix_a,matrix_b)
print("matrix multiplication:\n",matrix_multi)

#Multiply a 3x3 matrix with a 3x1 vector.
matrix_a=([[1,2,3],[4,5,6],[6,7,8]])
vector_b=([[10],[20],[30]])
result=np.dot(matrix_a,vector_b)
print("\nmatrix vector:\n",result)

#Create a 4x4 identity matrix and multiply it by a 4x4 matrix filled with random integers.
indentity_matrix=np.eye(4)
random_matrix=np.random.randint(1,10,(4,4))
result_matrix=np.dot(indentity_matrix,random_matrix)
print("\n indenty matrix:\n",indentity_matrix)
print("\n random matrix:\n",random_matrix)
print("\n result matrix:\n",result_matrix)

#Perform matrix multiplication on two 3x3 matrices: a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] and b = [[9, 8, 7], [6, 5, 4], [3, 2, 1]].
matrix_a=([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
matrix_b=([[9, 8, 7], [6, 5, 4], [3, 2, 1]])
result=np.dot(matrix_a,matrix_b)
print("\nproduct matrix:\n",result)

#Create a 2x3 matrix and a 3x2 matrix. Perform matrix multiplication.
matrix_a=([[1,2,3],[4,5,6]])
matrix_b=([[7,8],[9,10],[11,12]])
result_matrix_multiplication=np.dot(matrix_a,matrix_b)
print("\nmatrix multiplication.\n",result_matrix_multiplication)

"""4.Broadcasting

Create a 1D array: array = [10, 20, 30]. Subtract a scalar value, 5, using broadcasting.
Create a 3x3 array and a 3x1 array. Add them using broadcasting.
Divide a 4x4 array by a scalar value, 2, using broadcasting.
Create a 3x3 array and add 3 to each element using broadcasting.
Multiply a 1D array of shape (5,) by a 2D array of shape (5, 5) using broadcasting.bold text
"""

import numpy as np

#Create a 1D array: array = [10, 20, 30]. Subtract a scalar value, 5, using broadcasting.
arr_a= np.array([10,20,30])
scalar=5
broadcasted_array=array_a-scalar
print("broadcasted Array:\n",broadcasted_array)

#Create a 3x3 array and a 3x1 array. Add them using broadcasting.
arr_a=np.array([[1,2,3],[4,5,6],[7,8,9]])
arr_b=np.array([[10],[20],[30]])
broadcasted_array=arr_a + arr_b
print("\n Add using broadcasting:\n",broadcasted_array)

#Divide a 4x4 array by a scalar value, 2, using broadcasting.
arr_a=np.array([[1,2,3,4],[5,6,7,8,],[9,10,11,12,],[13,14,15,16,]])
scalar=2
broadcasted_array=arr_a/2
print("\n divide using broadcasting:\n",broadcasted_array)

#Create a 3x3 array and add 3 to each element using broadcasting.
arr_a=np.array([[1,2,3],[4,5,6],[7,8,9]])
scalar=3
broadcasted_array=array_a + scalar
print("\n Add using broadcasting:\n",broadcasted_array)

#Multiply a 1D array of shape (5,) by a 2D array of shape (5, 5) using broadcasting.
arr_a= np.array([1,2,3,4,5])
arr_b=np.array([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]])
broadcasted_array=arr_a[:,np.newaxis]*arr_b
print("\nshaping using broadcasting:\n",broadcasted_array)

"""5.Statistical Operations

Calculate the median of the array: data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].
Calculate the mode of the array: data = [1, 2, 2, 3, 4, 4, 4, 5, 6].
Calculate the range of the array: data = [10, 20, 30, 40, 50].
Calculate the 25th percentile of the array: data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].
Calculate the correlation coefficient between two arrays: a = [1, 2, 3, 4, 5] and b = [2, 4, 6, 8, 10].

"""

import numpy as np
#Calculate the median of the array: data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].
data =np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
median_value=np.median(data)
print("Median value:\n",median_value)

from scipy import stats
#Calculate the mode of the array: data = [1, 2, 2, 3, 4, 4, 4, 5, 6].
data=np.array([1, 2, 2, 3, 4, 4, 4, 5, 6])
mode_value=stats.mode(data)
print("\nMode value:\n",mode_value)

#Calculate the range of the array: data = [10, 20, 30, 40, 50].
data = np.array([10, 20, 30, 40, 50])
range_of_arr=np.ptp(data)
print("\nRange of array-->",range_of_arr)

#Calculate the 25th percentile of the array: data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].
data=np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
percentile_value=np.percentile(data,25)
print("\n25th percentile of the array-->",percentile_value)

#Calculate the correlation coefficient between two arrays: a = [1, 2, 3, 4, 5] and b = [2, 4, 6, 8, 10].

data_a =np.array([1, 2, 3, 4, 5])
data_b =np.array([2, 4, 6, 8, 10])
correlation_coefficient_value=np.corrcoef(data_a,data_b)
print("\n correlation coefficient value-->\n",correlation_coefficient_value)

"""6.Reshaping Arrays

Reshape a 1D array of 12 elements to a 3x4 array.
Reshape a 2D array of shape (6, 2) to (3, 4).
Create a 4x4 array and flatten it.
Reshape a 3D array of shape (2, 3, 4) to (4, 3, 2).
Reshape a 1D array to a 2D array with 1 row and many columns.
"""

import numpy as np
#Reshape a 1D array of 12 elements to a 3x4 array.
arr =np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,11,12])
Reshape_arr=arr.reshape(3,4)
print("Reshape Array:\n",Reshape_arr)

#Reshape a 2D array of shape (6, 2) to (3, 4).
arr =np.array([[1, 2],[ 3, 4],[ 5, 6],[7, 8],[9, 10],[11,12]])
Reshape_arr=arr.reshape(3,4)
print("\n Reshape Array2:\n",Reshape_arr)

#Create a 4x4 array and flatten it
arr =np.array([[1, 2, 3, 4],[ 5, 6, 7, 8],[9, 10,11,12],[13,14,15,16]])
flatten_array=arr.flatten()
print("\noriginal array:\n",arr)
print("\nflatten array:\n",flatten_array)

#Reshape a 3D array of shape (2, 3, 4) to (4, 3, 2)
arr=np.arange(24).reshape(2,3,4)
Reshape_arr=arr.reshape(4,3,2)
print("\noriginal array2:\n",arr)
print("\n reshaped array2:\n",Reshape_arr)

#Reshape a 1D array to a 2D array with 1 row and many columns.
arr=np.array([1,2,3,4,5,6])
Reshape_arr=arr.reshape(1,-1)
print("\noriginal array3:\n",arr)
print("\nreshaped array3:\n",Reshape_arr)

"""Element-wise Operations

Create two arrays: a = [1, 3, 5] and b = [2, 4, 6]. Perform element-wise division.
Create two arrays: a = [2, 4, 6] and b = [1, 3, 5]. Perform element-wise modulus.
Add 10 to each element in the array: a = [1, 2, 3, 4, 5].
Subtract 5 from each element in the array: b = [10, 20, 30, 40, 50].
Square each element in the array: c = [1, 2, 3, 4, 5].
"""

import numpy as np
#Create two arrays: a = [1, 3, 5] and b = [2, 4, 6]. Perform element-wise division.
arr_a=np.array([1, 3, 5])
arr_b=np.array([2, 4, 6])
result_array=arr_a / arr_b
print("element-wise division:",result_array)

#Create two arrays: a = [2, 4, 6] and b = [1, 3, 5]. Perform element-wise modulus.
arr_a=np.array([2,4,6])
arr_b=np.array([1,3,6])
result_array=arr_a % arr_b
print("\nelement-wise division:",result_array)

#Add 10 to each element in the array: a = [1, 2, 3, 4, 5].
arr = np.array([1, 2, 3, 4, 5])
result_array=arr+10
print("\n Add 10 to each element in the array:",result_array)

#Subtract 5 from each element in the array: b = [10, 20, 30, 40, 50].
arr = np.array([10, 20, 30, 40, 50])
result_array=arr-5
print("\nSubtract 5 from each element in the array:",result_array)

#Square each element in the array: c = [1, 2, 3, 4, 5].
arr = np.array([1, 2, 3, 4, 5])
result_array=arr**2
print("\n Square each element in the array:",result_array)

"""8.Slicing and Indexing

Create a 3D array: array_3d = [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]. Access the element at [1, 1, 1].
Slice the first layer of a 3D array: array_3d = [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]].
Access all elements in the last row of the array: array_2d = [[10, 20, 30], [40, 50, 60], [70, 80, 90]].
Access all elements in the first column of the array: array_2d = [[10, 20, 30], [40, 50, 60], [70, 80, 90]].
Slice the last two rows and columns of the array: array_2d = [[10, 20, 30], [40, 50, 60], [70, 80, 90]].
"""

import numpy as np
#Create a 3D array: array_3d = [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]. Access the element at [1, 1, 1].
array_3d =np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
print("array 3D:\n",array_3d)
element=array_3d[1,1,1]
print("element at [1,1,1]:",element)

#Slice the first layer of a 3D array: array_3d = [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]].
array_3d =np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
element_array=array_3d[0:1,]
print("\nSlice the first layer of a 3D array:\n",element_array)

#Access all elements in the last row of the array: array_2d = [[10, 20, 30], [40, 50, 60], [70, 80, 90]].
array_2d =np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])
ele_arr=array_2d[-1:,]
print("\nAccess all elements in the last row of the array:\n",ele_arr)

#Access all elements in the first column of the array: array_2d = [[10, 20, 30], [40, 50, 60], [70, 80, 90]].
array_2d =np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])
ele_arr=array_2d[:,1]
print("\nAccess all elements in the first column of the array:\n",ele_arr)
#Slice the last two rows and columns of the array: array_2d = [[10, 20, 30], [40, 50, 60], [70, 80, 90]].
array_2d =np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])
ele_arr=array_2d[1:,]
print("\nSlice the last two rows and columns of the array:\n",ele_arr)

"""9.Creating Random Arrays

Generate a random array of 20 elements with values between 0 and 1.
Create a 4x4 array with random integers between 10 and 20.
Create a 3x3 array with random floats between -1 and 1.
Generate an array of 15 random integers between 100 and 200.
Create a 5x5 array with random floats between 0 and 10.
"""

import numpy as np

#Generate a random array of 20 elements with values between 0 and 1.
random_arr=np.random.rand(20)
print(" random array of 20 elements with values between 0 and 1:\n",random_arr)

#Create a 4x4 array with random integers between 10 and 20.
random_arr=np.random.randint(10,20,(4,4))
print("\n 4x4 array with random integers between 10 and 20\n",random_arr)

#Create a 3x3 array with random floats between -1 and 1.
random_arr=np.random.randint(-1,1,(3,3))
print("\n 3x3 array with random floats between -1 and 1\n",random_arr)

#Generate an array of 15 random integers between 100 and 200.
random_arr=np.random.randint(100,200,15)
print("\narray of 15 random integers between 100 and 200\n",random_arr)

#Create a 5x5 array with random floats between 0 and 10.
random_arr=np.random.randint(0,10,(5,5))
print("\n5x5 array with random floats between 0 and 10\n",random_arr)

"""10.Stacking and Concatenating Arrays

Vertically stack two arrays: a = [[1, 2], [3, 4]] and b = [[5, 6], [7, 8]].
Horizontally stack two arrays: a = [[1, 2], [3, 4]] and b = [[5, 6], [7, 8]].
Concatenate two 1D arrays: a = [1, 2, 3] and b = [4, 5, 6].
Concatenate two 3x3 arrays along rows: a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] and b = [[10, 11, 12], [13, 14, 15], [16, 17, 18]].
Concatenate two 3x3 arrays along columns: a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] and b = [[10, 11, 12], [13, 14, 15], [16, 17, 18]].

"""

import numpy as np

#Vertically stack two arrays: a = [[1, 2], [3, 4]] and b = [[5, 6], [7, 8]].

arr_a=np.array([[1, 2], [3, 4]])
arr_b=np.array([[5, 6], [7, 8]])
Vertically_stack = np.vstack((arr_a,arr_b))
print("Vertically stack two arrays:\n",Vertically_stack)

#Horizontally stack two arrays: a = [[1, 2], [3, 4]] and b = [[5, 6], [7, 8]].

Horizontally_stack = np.hstack((arr_a,arr_b))
print("\nHorizontally stack two arrays:\n",Horizontally_stack)

#Concatenate two 1D arrays: a = [1, 2, 3] and b = [4, 5, 6].

arr_a=np.array([1, 2,3])
arr_b=np.array([4,5,6])
#concatenate_arr=arr_a + arr_b
a=np.concatenate((arr_a ,arr_b))
#print("\nConcatenate two 1D arrays:\n",Concatenate_arr)
print("\nConcatenate two 1D arrays:\n",a)

#Concatenate two 3x3 arrays along rows: a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] and b = [[10, 11, 12], [13, 14, 15], [16, 17, 18]].

arr_a=np.array([[1, 2,3],[4,5,6],[7,8,9]])
arr_b=np.array([[10,11,12],[13,14,15],[16,17,18]])
cont_arr=np.concatenate((arr_a,arr_b),axis=0)#axis=0 use for row
print("\nConcatenate two 3x3 arrays along rows:\n",cont_arr)

#Concatenate two 3x3 arrays along columns: a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] and b = [[10, 11, 12], [13, 14, 15], [16, 17, 18]].

cont_arr=np.concatenate((arr_a,arr_b),axis=1)#axis=1 use for column
print("\nConcatenate two 3x3 arrays along rows:\n",cont_arr)